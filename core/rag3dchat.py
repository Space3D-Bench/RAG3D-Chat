from pathlib import Path
from typing import Optional, Tuple

from semantic_kernel import Kernel
from semantic_kernel.services.ai_service_client_base import AIServiceClientBase
from semantic_kernel.planners import (
    FunctionCallingStepwisePlanner,
    FunctionCallingStepwisePlannerOptions,
)

from misc.scenes_enum import Scene
from plugins.plugins_factory import PluginsFactory
from plugins.nav_plugin import NavPlugin
from plugins.text_plugin import TextPlugin
from plugins.sql_plugin import SqlPlugin
from plugins.image_plugin import ImagePlugin


class RAG3DChat:
    def __init__(self, plugins_factory: PluginsFactory, path_to_data: Path) -> None:
        """
        Constructor

        Args:
            plugins_factory (PluginsFactory): factory for plugins
            path_to_data (Path): path to the folder containing the data for RAG/plugins
        """
        self._plugins_factory = plugins_factory
        self._path_to_data = path_to_data

        self._nav_plugin: Optional[NavPlugin] = None
        self._text_plugin: Optional[TextPlugin] = None
        self._sql_plugin: Optional[SqlPlugin] = None
        self._image_plugin: Optional[ImagePlugin] = None

        self._kernel: Optional[Kernel] = None
        self._planner: Optional[FunctionCallingStepwisePlanner] = None

    def set_scene(self, scene_choice: Scene, nav_vis_path: Optional[Path] = None) -> None:
        """
        Sets up the scene for the chatbot.

        Args:
            scene_choice (Scene): selected scene to be set up
            nav_vis_path (Optional[Path], optional): path to the folder where the navigation 
                visualization should be saved.
        """
        self._nav_plugin = self._plugins_factory.get_nav_plugin(
            Path(f"{self._path_to_data}/nav_data/navmesh.txt"),
            nav_vis_path,
        )
        self._text_plugin = self._plugins_factory.get_text_plugin(
            persist_dir=Path(f".TEXT_DIR/{scene_choice.value}"),
            text_dir=Path(f"{self._path_to_data}/text_data"),
        )
        self._sql_plugin = self._plugins_factory.get_sql_plugin(
            Path(f"{self._path_to_data}/sql_data/sql_db_data.json"),
            Path(f".SQL_DIR/{scene_choice.value}"),
        )
        self._image_plugin = self._plugins_factory.get_image_plugin(
            persist_dir=Path(f".IMAGE_DIR/{scene_choice.value}"),
            image_dir=Path(f"{self._path_to_data}/img_data"),
        )

    def set_sk(self, service: AIServiceClientBase) -> None:
        """
        If the scene was previously set, then this method sets up the semantic kernel with all 
        the plugins and the corresponding service.

        Args:
            service (AIServiceClientBase): Semantic Kernel service to be set up
        """
        if (
            self._image_plugin is None
            or self._nav_plugin is None
            or self._sql_plugin is None
            or self._text_plugin is None
        ):
            raise ValueError("You need to set the scene first")

        self._kernel = Kernel()
        self._kernel.add_service(service)

        self._kernel.add_plugin(self._text_plugin, plugin_name="text")
        self._kernel.add_plugin(self._nav_plugin, plugin_name="navigation")
        self._kernel.add_plugin(self._sql_plugin, plugin_name="sql")
        self._kernel.add_plugin(self._image_plugin, plugin_name="image")

        options = FunctionCallingStepwisePlannerOptions(
            max_iterations=10,
            min_iteration_time_ms=2000,
            max_tokens=10000,
        )
        self._planner = FunctionCallingStepwisePlanner(
            service_id=service.service_id,
            options=options,
        )
    
    async def get_answer(self, question: str) -> Tuple[str, str]:
        """
        Gets the answer for the given question by invoking the SK planner with the plugins.

        Args:
            question (str): question to be answered
        
        Returns:
            Tuple[str, str]: final answer to the question and the plan generated by the planner
        """
        if self._planner is None:
            raise ValueError("You need to set the SK first")
        
        result = await self._planner.invoke(self._kernel, question)
        return result.final_answer, result.chat_history[0]
